name: Tests Pipeline

on:
  pull_request:
  push:
    branches: ['main']

jobs:
  generate-matrix:
    name: 'Generate matrix from cabal'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract the tested GHC versions
        id: set-matrix
        uses: kleidukos/get-tested@v0.1.7.1
        with:
          cabal-file: print-api.cabal
          ubuntu-version: 'latest'
          macos-version: 'latest'
          version: 0.1.7.1

  generate-alpine-matrix:
    name: 'Generate Alpine matrix from cabal'
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    runs-on: ubuntu-latest
    steps:
      - name: Extract the tested GHC versions
        id: set-matrix
        uses: kleidukos/get-tested@v0.1.7.1
        with:
          cabal-file: print-api.cabal
          version: 0.1.7.1
          ubuntu-version: 'latest'

  builds:
    name: ${{ matrix.ghc }} on ${{ matrix.os }}
    needs: generate-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.generate-matrix.outputs.matrix) }}
    steps:
      - name: "Install tools"
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt install upx-ucl

      - name: Checkout base repo
        uses: actions/checkout@v4

      - name: Set up Haskell
        id: setup-haskell
        uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: 'latest'

      - name: Configure
        run: |
          ARCHITECTURE=$(uname -m)
          echo "ARCH=$ARCHITECTURE" >> $GITHUB_ENV
          echo ${{ env.ARCH }}
          cabal configure --enable-tests

      - name: Freeze
        run: cabal freeze --project-file=cabal.release.project

      - name: Cache
        uses: actions/cache@v4.0.2
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: ${{ matrix.os }}-ghc-${{ matrix.ghc }}-${{ hashFiles('**/plan.json') }}
          restore-keys: ${{ matrix.os }}-ghc-${{ matrix.ghc }}-

      - name: Build
        run: cabal build --project-file=cabal.release.project

      - name: Install
        run: |
          mkdir distribution
          for executable in 'print-api' 'print-api-${{ matrix.ghc }}'; do
            path=$(cabal -v0 --project-file=cabal.release.project list-bin "print-api:exe:${executable}")
            cp "${path}" distribution
          done
          echo "$GITHUB_WORKSPACE/distribution" >> "$GITHUB_PATH"
          echo "REPORT_NAME=report-${{ matrix.os }}-ghc-${{ matrix.ghc }}" >> $GITHUB_ENV

      - name: Test
        run: cabal test --project-file=cabal.release.project --test-options "--xml=../print-api/${{ env.REPORT_NAME }}.xml" all

      - name: Upload the test report
        uses: actions/upload-artifact@v4
        if: success() || failure() # always run even if the previous step fails
        with:
          name: ${{ env.REPORT_NAME }}
          path: ${{ env.REPORT_NAME }}.xml

      - name: File type
        run: file distribution/*

      - name: Post-process executables
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          for executable in distribution/*; do
            strip "${executable}"
            upx -9 "${executable}"
          done

      - name: Package the executables
        shell: bash
        run: |
          executables=( $(ls distribution) )
          version=$(./distribution/print-api --version)
          archive="print-api-${version}-${{ matrix.os }}-${{ env.ARCH }}-ghc-${{ matrix.ghc }}.tar.gz"
          tar -czvf "${archive}" -C distribution "${executables[@]}"
          echo "PRINTAPI_EXEC_TAR=${archive}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=artifact-${{ matrix.os }}-ghc-${{ matrix.ghc }}" >> $GITHUB_ENV

      - name: Upload the executables archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PRINTAPI_EXEC_TAR }}

  build-alpine:
    name: ${{ matrix.ghc }} on alpine-3.20
    needs: generate-alpine-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.generate-alpine-matrix.outputs.matrix) }}
    container: 'alpine:3.20'
    steps:
      - name: Install extra dependencies
        shell: sh
        run: |
            apk add bash binutils-gold curl \
                curl file g++ gcc git gmp-dev \
                jq libc-dev libffi-dev make \
                musl-dev ncurses-dev perl pkgconfig \
                sudo tar upx xz zlib-dev zlib-static

      - uses: actions/checkout@v4

      - uses: haskell-actions/setup@v2
        id: setup-haskell
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: 'latest'

      - name: Configure
        run: |
          ARCHITECTURE=$(uname -m)
          echo "ARCH=$ARCHITECTURE" >> $GITHUB_ENV
          echo ${{ env.ARCH }}
          cabal configure --enable-tests

      - name: Freeze
        run: cabal freeze --project-file=cabal.static.project

      - name: Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store }}
          key: alpine-ghc-${{ matrix.ghc }}-${{ hashFiles('**/plan.json') }}
          restore-keys: alpine-3.20-${{ matrix.ghc }}-

      - name: Build
        run: cabal build --project-file=cabal.static.project

      - name: Install
        run: |
          mkdir distribution
          for executable in 'print-api' 'print-api-${{ matrix.ghc }}'; do
            path=$(cabal -v0 --project-file=cabal.static.project list-bin "print-api:exe:${executable}")
            cp "${path}" distribution
          done
          echo "$GITHUB_WORKSPACE/distribution" >> "$GITHUB_PATH"
          echo "REPORT_NAME=report-alpine-3.20-ghc-${{ matrix.ghc }}" >> $GITHUB_ENV

      - name: Test
        run: cabal test --project-file=cabal.static.project --test-options "--xml=../print-api/${REPORT_NAME}.xml" all

      - name: Upload the test report
        uses: actions/upload-artifact@v4
        if: success() || failure() # always run even if the previous step fails
        with: 
          name: ${{ env.REPORT_NAME }}
          path: ${{ env.REPORT_NAME }}.xml

      - name: File type
        run: file distribution/*

      - name: Post-process executables
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          for executable in distribution/*; do
            strip "${executable}"
            upx -9 "${executable}"
          done

      - name: Package the executables
        shell: bash
        run: |
          executables=( $(ls distribution) )
          version=$(./distribution/print-api --version)
          archive="print-api-${version}-alpine-3.20-${{ env.ARCH }}-static-ghc-${{ matrix.ghc }}.tar.gz"
          tar -c -z -v -f "${archive}" -C distribution "${executables[@]}"
          echo "PRINTAPI_EXEC_TAR=${archive}" >> $GITHUB_ENV
          echo "ARTIFACT_NAME=artifact-alpine-3.20-ghc-${{ matrix.ghc }}" >> $GITHUB_ENV

      - name: Upload the executables archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PRINTAPI_EXEC_TAR }}

  collect-test-results:
    name: Collect test results
    runs-on: ubuntu-latest
    needs: ['builds', 'build-alpine']
    steps:
      - name: Install junitparser
        run: |
          pip install junitparser==3.2.0
      - name: Download Test Report
        uses: actions/download-artifact@v4
        with:
          pattern: report-*
          merge-multiple: true
          workflow: ${{ github.event.workflow.id }}
          run-id: ${{ github.event.workflow_run.id }}
          github-token: ${{ secrets.GH_PAT }} # token with actions:read permissions on target repo
      - name: Merge XML files
        run: |
          junitparser merge --glob *.xml final-report.xml
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        with:
          commit: ${{github.event.workflow_run.head_sha}}
          report_paths: 'final-report.xml'

  prerelease-head:
    name: Create a GitHub prerelease with the binary artifacts
    runs-on: ubuntu-latest
    needs: ['builds', 'build-alpine']

    steps:
    - uses: actions/download-artifact@v4
      with:
        pattern: artifact-*
        merge-multiple: true
        path: ./out

    - name: Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        files: ./out/*
        tag_name: print-api-head
